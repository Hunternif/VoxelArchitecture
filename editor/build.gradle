apply plugin: 'java-library'
apply plugin: 'kotlin'
apply plugin: 'antlr'
apply plugin: 'idea'

buildscript {
    ext.kotlin_version = '1.6.10'
    ext.lwjglVersion = '3.3.0'
    ext.imguiVersion = '1.86.9'
    ext.jomlVersion = '1.9.23'
    ext.antlrVersion = '4.9.1'
    ext.nativePlatform = 'windows'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
repositories {
    mavenCentral()
}
dependencies {
    provided project(':core')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    implementation "org.joml:joml:$jomlVersion"

    implementation "org.lwjgl:lwjgl-stb:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-stb::natives-windows"

    implementation "org.lwjgl:lwjgl-nfd:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-nfd::natives-windows"

    implementation(platform("org.lwjgl:lwjgl-bom:$lwjglVersion"))

    ["", "-opengl", "-glfw"].each {
        implementation "org.lwjgl:lwjgl$it:$lwjglVersion"
        implementation "org.lwjgl:lwjgl$it::natives-windows"
    }

    implementation "io.github.spair:imgui-java-app:$imguiVersion"
    implementation "io.github.spair:imgui-java-natives-windows:$imguiVersion"

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.13.3'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.3'

    implementation 'com.google.guava:guava:31.1-jre'

    antlr "org.antlr:antlr4:$antlrVersion"
    implementation "org.antlr:antlr4-runtime:$antlrVersion"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.reflections:reflections:0.9.11'
    testImplementation 'commons-io:commons-io:2.6'
    testImplementation 'org.mockito:mockito-core:3.1.0'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ['-package', 'hunternif.voxarch.editor.antlr']
    outputDirectory = new File("generated-src/antlr/main/hunternif/voxarch/editor/antlr".toString())
}

build.dependsOn generateGrammarSource
compileKotlin.dependsOn generateGrammarSource
compileJava.dependsOn generateGrammarSource


sourceSets {
    generated {
        java.srcDir 'generated-src/antlr/main/'
    }
    main.java.srcDirs += 'generated-src/antlr/main/'
}

compileGeneratedJava {
    // This fixes the error when trying to run tests for the whole project.
    // The error would say that ANTLR 4 runtime dependency is not found
    // in generated sources.
    classpath = configurations.compile
}

clean{
    delete "generated-src"
}

idea {
    module {
        sourceDirs += file("generated-src/antlr/main")
    }
}

compileJava.source sourceSets.generated.java, sourceSets.main.java
compileKotlin.source sourceSets.generated.java, sourceSets.main.java, sourceSets.main.kotlin
compileTestKotlin.source sourceSets.generated.java
compileJava {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes "Main-Class": "hunternif.voxarch.editor.EditorAppKt"
    }

    // Creates a fat jar with all dependencies
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // For some reason native libraries are copied for all platforms.
    // This hack excludes some of them:
    if (nativePlatform == "windows") {
        eachFile {
            if (it.file.path =~ "natives-linux" || it.file.path =~ "natives-macos" ||
                    it.file.name.endsWith(".so") || it.file.name.endsWith(".dylib")
            ) {
                it.exclude()
            }
        }
    }
}